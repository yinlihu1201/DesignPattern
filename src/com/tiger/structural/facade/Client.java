package com.tiger.structural.facade;

/**
 * 
 * 外观模式：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
 * 
 * 外观模式和建造者模式的区别：
	比如去KFC买东西
		建造者模式：这个是《创建型模式：关注点在创建上》,消费者买个汉堡，并不需要知道汉堡是怎么做的，由建造者模式创建生产
		外观模式：这个是《结构型模式：关注点在结构上即用创建的东西做什么》,用建造者创建了汉堡、鸡块、薯条等，消费者可选择的很多，为了方便消费者，我们使用套餐A、套餐B（Facade）供消费者选择
 * 
 * 何时使用？
	    首先，在设计初期阶段，应该有意识的将不同的两个层分离。层与层之间建立外观Facade。
	    其次，在开发阶段，子系统往往因为不断重构演化而变得越来越复杂。增加外观Facade可以提供一个简单的接口，减少他们的依赖。
	    第三，在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了。但是新系统必须依赖此系统。为新系统开发一个Facade，来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作。
 * 
 * @author yinlihu
 *
 */
public class Client {
	public static void main(String[] args) {
		Facade facade = new Facade();
		
		facade.methodA();
		
		facade.methodB();
	}
}
